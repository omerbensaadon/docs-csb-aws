---
title: Installing and Configuring Cloud Service Broker for AWS
owner: Cloud Service Broker
---

<strong><%= modified_date %></strong>

This topic describes how to install and configure <%= vars.product_full %> (<%= vars.product_short %>).

## <a id="prereq"></a> Prerequisites for Installing <%= vars.product_short %>

Before you install <%= vars.product_short %>, you must have:

* **AWS Account Credentials:**

    Any services provisioned by CSB must be provisioned by the same AWS account
    that the foundation is running in.
    To do this, the broker needs the following credentials to manage resources within that account:

    - Access Key ID
    - Secret Access Key

* **IAM Policies:**

    The AWS account needs the following IAM policies:

    ```json
    {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Action": [
                    "iam:DeleteAccessKey",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "s3:CreateBucket",
                    "dynamodb:DeleteTable",
                    "rds:CreateDBSubnetGroup",
                    "s3:GetBucketObjectLockConfiguration",
                    "rds:ModifyDBParameterGroup",
                    "dynamodb:DescribeTable",
                    "ec2:RevokeSecurityGroupEgress",
                    "rds:ModifyDBInstance",
                    "s3:PutBucketAcl",
                    "dynamodb:DescribeContinuousBackups",
                    "elasticache:ModifyReplicationGroup",
                    "s3:DeleteObject",
                    "iam:GetAccountAuthorizationDetails",
                    "elasticache:DeleteCacheSubnetGroup",
                    "rds:DeleteDBInstance",
                    "iam:ListPolicies",
                    "elasticache:DescribeReplicationGroups",
                    "rds:CreateDBParameterGroup",
                    "s3:PutAccountPublicAccessBlock",
                    "s3:GetBucketWebsite",
                    "iam:GetPolicy",
                    "rds:DescribeDBSnapshots",
                    "iam:DeleteUserPolicy",
                    "rds:DeleteDBSnapshot",
                    "s3:DeleteBucketPolicy",
                    "s3:GetReplicationConfiguration",
                    "ec2:RevokeSecurityGroupIngress",
                    "dynamodb:CreateTable",
                    "rds:DeleteDBSubnetGroup",
                    "s3:PutObject",
                    "s3:GetObject",
                    "iam:GetUserPolicy",
                    "iam:ListGroupsForUser",
                    "sqs:DeleteQueue",
                    "rds:DeleteDBParameterGroup",
                    "s3:PutAccessPointPolicy",
                    "elasticache:DescribeCacheClusters",
                    "ec2:DescribeSubnets",
                    "dynamodb:DescribeBackup",
                    "elasticache:ListTagsForResource",
                    "s3:GetLifecycleConfiguration",
                    "s3:GetBucketTagging",
                    "rds:DescribeDBSubnetGroups",
                    "dynamodb:ListTables",
                    "s3:GetBucketLogging",
                    "dynamodb:CreateTableReplica",
                    "dynamodb:ListTagsOfResource",
                    "s3:ListBucket",
                    "s3:GetAccelerateConfiguration",
                    "elasticache:CreateReplicationGroup",
                    "iam:CreateUser",
                    "s3:GetBucketPolicy",
                    "ec2:DescribeVpcAttribute",
                    "iam:CreateAccessKey",
                    "s3:PutEncryptionConfiguration",
                    "s3:GetEncryptionConfiguration",
                    "ec2:DescribeNetworkInterfaces",
                    "dynamodb:TagResource",
                    "s3:PutBucketTagging",
                    "s3:GetBucketRequestPayment",
                    "rds:CreateDBInstance",
                    "elasticache:DescribeCacheSubnetGroups",
                    "ec2:CreateSecurityGroup",
                    "elasticache:CreateCacheSubnetGroup",
                    "rds:DescribeDBInstances",
                    "iam:ListAttachedUserPolicies",
                    "rds:DeleteDBCluster",
                    "s3:DeleteBucket",
                    "s3:PutBucketVersioning",
                    "s3:PutObjectAcl",
                    "iam:ListAccessKeys",
                    "rds:AddTagsToResource",
                    "s3:PutBucketPublicAccessBlock",
                    "iam:DeleteUser",
                    "s3:GetBucketVersioning",
                    "iam:ListUserPolicies",
                    "s3:GetBucketAcl",
                    "dynamodb:DescribeTimeToLive",
                    "ec2:DescribeSecurityGroups",
                    "elasticache:DeleteReplicationGroup",
                    "rds:ListTagsForResource",
                    "s3:PutBucketRequestPayment",
                    "rds:CreateDBCluster",
                    "ec2:DescribeVpcs",
                    "iam:PutUserPolicy",
                    "ec2:DeleteSecurityGroup",
                    "s3:GetBucketCORS",
                    "s3:PutBucketPolicy",
                    "s3:DeleteAccessPointPolicy",
                    "sqs:CreateQueue",
                    "iam:GetUser",
                    "rds:DescribeDBClusters",
                    "elasticache:ModifyReplicationGroupShardConfiguration"
                ],
                "Effect": "Allow",
                "Resource": "*"
            }
        ]
    }
    ```

## <a id="install"></a> Install <%= vars.product_short %>

To install the <%= vars.product_short %> using <%= vars.ops_manager %> Installation Dashboard:

1. Download the product file from
[<%= vars.product_network %>](https://network.pivotal.io/products/cloud-service-broker-aws/).
AWS services are provided in the `AWS` release, demarcated as `VERSION-aws`, for example,
`v1.0.0-aws`.

1. Navigate to the <%= vars.ops_manager %> Installation Dashboard and click **Import a Product** to
upload the product file.

1. Under **Import a Product**, click **+** next to the version number of <%= vars.product_short %>
in the left sidebar. This adds the tile to your staging area.

1. Click the newly added **Cloud Service Broker for AWS** tile.


## <a id="config-aws"></a> Configure the <%= vars.product_short %>

The following procedures describe configuring the panes on the <%= vars.product_short %> tile.


### <a id="config-azs"></a> Configure AZs and Networks

This section describes how to choose an AZ to run the service broker for <%= vars.product_short %>.
It also describes how to select networks for <%= vars.product_short %>.

To configure AZs and networks:

1. Click **Assign AZs and Networks**.

1. Configure the fields as follows:

    | Field | Instructions |
    |-------|----------------|
    | Place singleton jobs in | Select the AZ in which the broker VM for <%= vars.product_short %> runs. The broker runs as a singleton job. |
    | Balance other jobs in | Select the AZs in which other jobs can run. |
    | Network | Select a subnet for the <%= vars.product_short %> broker. This is typically the same subnet that includes the component VMs for <%= vars.app_runtime_full %> (<%= vars.app_runtime_abbr %>). |

1. Click **Save**.


### <a id="config-creds"></a> Configure AWS Credentials

This section describes how to configure the AWS credentials that <%= vars.product_short %> requires to
manage service instances.

To configure AWS credentials:

1. Click **AWS Config**.

1. Configure the fields as follows:

    | Field | Instructions |
    |-------|--------------|
    | AWS Access Key | Enter the AWS Access Key |
    | AWS Secret Access Key | Enter the AWS Secret Access Key |
    | Region | Enter the Region where your VPC is located |



1. Click **Save**.


### <a id="state-db"></a>Configure a State Database

This section describes how to associate <%= vars.product_short %> with a MySQL database,
the _state database_.
The broker requires this database to store its state.

**Prerequisite:** A small MySQL database to use as the state database.

To configure <%= vars.product_short %> with a database:

1. Click **Service Broker Config**.

1. Enter the credentials for the state database.

3. Click **Save**.

3. Return to the <%= vars.ops_manager %> Installation Dashboard.

3. Click **Review Pending Changes**.

3. Click **Apply changes** to install the <%= vars.product_short %> tile.

<%# If needed, include additional configuration information below.
For example, maybe there are configuration options not required for installation but which could be
useful for certain users.
Typical topics include:**

+ **Self-service:** Do you have recommendations for how to configure/design plans in the tile so that
users can choose the best options for themselves?
+ **High availability:** How do you configure/deploy X Service tile to be highly available? %>

### <a id="services"></a> Configure Services with <%= vars.product_short %>

This section describes how to configure services and service plans offered by the
<%= vars.product_short %> within the Cloud Foundry Marketplace on your instance of Cloud Foundry.

<%= vars.product_short %> specifies new service plans through JSON.
An example is provided, using the smallest possible size, within each service.

To configure services and service plans:

1. Click the already-installed <%= vars.product_short %> tile in your
<%= vars.ops_manager %> tile Dashboard.

1. Find the service you want to make available in the left hand navigation under
the **Settings** tab.

1. Enter additional plans as additional JSON objects within the provided field.

1. Click **Save**.

1. Return to the <%= vars.ops_manager %> Installation Dashboard and click **Review Pending Changes**.

1. Click **Apply changes**.

1. Review your Cloud Foundry Marketplace to see the new plan sizes.
